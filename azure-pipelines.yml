trigger:
  branches:
    include:
      - PlaidBridgeOpenBankingApi

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Name you want for your container image repository.
  imageName: 'plaidbridgeopenbankingapi'
  # Commit ID will be used as the tag (built-in variable).
  commitId: $(Build.SourceVersion)
  # The ACR login server; e.g. myregistry.azurecr.io
  containerRegistry: $(ACR_LOGIN_SERVER)
  
  # The resource group where your Container App exists.
  resourceGroup: 'YourResourceGroup'           # Replace with your actual resource group name
  # The name of the Container App in Azure.
  containerAppName: $(AZURE_CONTAINERAPP_NAME)
  # Azure subscription service connection name.
  azureSubscription: $(AZURE_SERVICE_CONNECTION)

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
      # Use Docker task to build and push the image to ACR.
      - task: Docker@2
        displayName: 'Build and Push Docker Image'
        inputs:
          containerRegistry: '$(ACR_SERVICE_CONNECTION)'   # This should reference your ACR service connection.
          repository: '$(imageName)'
          dockerfile: 'Dockerfile'
          command: 'buildAndPush'
          tags: |
            $(commitId)

- stage: Deploy
  displayName: 'Deploy to Azure Container Apps'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
      # Use AzureCLI task to update the container app with the new image.
      - task: AzureCLI@2
        displayName: 'Deploy Container App'
        inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Deploying container app with image: $(containerRegistry)/$(imageName):$(commitId)"
            az containerapp update \
              --name $(containerAppName) \
              --resource-group $(resourceGroup) \
              --image $(containerRegistry)/$(imageName):$(commitId)
